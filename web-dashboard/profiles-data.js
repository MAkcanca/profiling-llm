// Forensic-LLM2 Profile Data Management
// This file handles loading and displaying the criminal profiles generated by different LLMs

// The profile metadata - this will be populated dynamically by the ProfileLoader
let profileMetadata = {};
// Track available runs
let availableRuns = [];
// Track the currently selected run
let selectedRun = '';

// Function to populate profile dropdowns
async function populateProfileDropdowns() {
  const runSelect = document.getElementById('profile-run');
  const testCaseSelect = document.getElementById('profile-test-case');
  const modelSelect = document.getElementById('profile-model');
  const compareSelect = document.getElementById('compare-with');
  
  // Clear existing options except the first one
  runSelect.innerHTML = '<option value="">All Runs</option>';
  testCaseSelect.innerHTML = '<option value="">Select a test case</option>';
  modelSelect.innerHTML = '<option value="">Select a model</option>';
  compareSelect.innerHTML = '<option value="">No comparison</option><option value="gold-standard">Gold Standard</option>';
  
  try {
    // Dynamically discover available profiles
    profileMetadata = await window.ProfileLoader.discoverProfiles();
    
    // Extract available runs from metadata
    availableRuns = await window.ProfileLoader.getAvailableRuns();
    
    // Populate run dropdown
    availableRuns.forEach(run => {
      const option = document.createElement('option');
      option.value = run;
      // Format run name (remove 'run_' prefix and format timestamp)
      const formattedDate = formatRunTimestamp(run);
      option.textContent = formattedDate;
      runSelect.appendChild(option);
    });
    
    // Add test cases
    Object.keys(profileMetadata).forEach(testCase => {
      const option = document.createElement('option');
      option.value = testCase;
      option.textContent = profileMetadata[testCase].displayName;
      testCaseSelect.appendChild(option);
    });
    
    // Add event listener for run selection
    runSelect.addEventListener('change', function() {
      selectedRun = this.value;
      
      // Reset test case and model dropdowns
      testCaseSelect.value = '';
      testCaseSelect.dispatchEvent(new Event('change'));
      
      // Repopulate test cases based on the selected run (or all runs if none selected)
      populateTestCasesForSelectedRun();
    });

    // Add event listener for test case selection
    testCaseSelect.addEventListener('change', function() {
      modelSelect.innerHTML = '<option value="">Select a model</option>';
      
      if (this.value) {
        const testCase = this.value;
        
        // Add gold standard option
        const goldOption = document.createElement('option');
        goldOption.value = 'gold-standard';
        goldOption.textContent = 'Gold Standard';
        modelSelect.appendChild(goldOption);
        
        // Add model options filtered by selected run
        const models = getModelsForTestCaseAndRun(testCase, selectedRun);
        models.forEach(model => {
          const option = document.createElement('option');
          option.value = model;
          option.textContent = model;
          modelSelect.appendChild(option);
        });
      }
    });
    
    // Add event listener for model selection
    modelSelect.addEventListener('change', function() {
      if (testCaseSelect.value && this.value) {
        // Update compare dropdown with other models
        compareSelect.innerHTML = '<option value="">No comparison</option><option value="gold-standard">Gold Standard</option>';
        
        const models = Object.keys(profileMetadata[testCaseSelect.value].models);
        models.forEach(model => {
          if (model !== this.value) {
            const option = document.createElement('option');
            option.value = model;
            option.textContent = model;
            compareSelect.appendChild(option);
          }
        });
      }
    });
    
    // Check URL parameters on page load
    checkUrlParameters();
    
  } catch (error) {
    console.error('Error populating profile dropdowns:', error);
    
    // Add a message to the UI about the error
    const errorOption = document.createElement('option');
    errorOption.value = '';
    errorOption.textContent = 'Error loading profiles. Check console for details.';
    testCaseSelect.appendChild(errorOption);
    testCaseSelect.disabled = true;
  }
}

// Function to load a profile
async function loadProfile(testCase, model, container, isComparison = false) {
  if (!testCase || !model) return;
  
  // Get the metadata for this profile
  let metadata;
  let filePath;
  
  if (model === 'gold-standard') {
    metadata = {
      reasoning_count: '-',
      framework_agreement: '-',
      semantic_similarity: '-',
      framework_contributions: {
        narrative_action_system: '-',
        sexual_behavioral_analysis: '-',
        behavioral_change_staging: '-',
        spatial_behavioral_analysis: '-'
      }
    };
    filePath = profileMetadata[testCase].goldStandard;
  } else {
    metadata = profileMetadata[testCase].models[model];
    filePath = metadata.filePath;
    
    // Dynamically load metrics if not already loaded
    if (metadata.reasoning_count === null) {
      await window.ProfileLoader.loadProfileMetrics(profileMetadata, testCase, model);
    }
  }
  
  // Update UI with metadata
  const prefix = isComparison ? 'comparison-' : 'profile-';
  const title = document.getElementById(isComparison ? 'comparison-profile-title' : 'primary-profile-title');
  
  // Set title
  title.textContent = model === 'gold-standard' 
    ? `${profileMetadata[testCase].displayName} - Gold Standard` 
    : `${profileMetadata[testCase].displayName} - ${model}`;
  
  // Update metrics
  document.querySelector(`#${prefix}reasoning-count .value`).textContent = metadata.reasoning_count;
  document.querySelector(`#${prefix}framework-agreement .value`).textContent = 
    metadata.framework_agreement === '-' ? '-' : (typeof metadata.framework_agreement === 'number' ? metadata.framework_agreement.toFixed(2) : metadata.framework_agreement);
  document.querySelector(`#${prefix}similarity .value`).textContent = 
    metadata.semantic_similarity === '-' ? '-' : (typeof metadata.semantic_similarity === 'number' ? metadata.semantic_similarity.toFixed(2) : metadata.semantic_similarity);
  
  // Update framework badges
  if (metadata.framework_contributions) {
    container.querySelectorAll('.framework-badge').forEach(badge => {
      const framework = badge.getAttribute('data-framework');
      const value = badge.querySelector('.framework-value');
      
      let contributionValue = '-';
      
      switch (framework) {
        case 'nas':
          contributionValue = metadata.framework_contributions.narrative_action_system;
          break;
        case 'shpa':
          contributionValue = metadata.framework_contributions.sexual_behavioral_analysis;
          break;
        case 'bcs':
          contributionValue = metadata.framework_contributions.behavioral_change_staging;
          break;
        case 'spatial':
          contributionValue = metadata.framework_contributions.spatial_behavioral_analysis;
          break;
      }
      
      value.textContent = contributionValue === '-' ? '-' : 
        (typeof contributionValue === 'number' ? contributionValue.toFixed(2) : contributionValue);
    });
  }
  
  // Load profile content
  const contentContainer = document.getElementById(isComparison ? 'comparison-profile-content' : 'primary-profile-content');
  
  // Show loading indicator
  contentContainer.innerHTML = '<div class="loading-indicator"><i class="fas fa-spinner fa-spin"></i> Loading profile...</div>';
  
  // Fetch the profile file
  fetch(filePath)
    .then(response => {
      if (!response.ok) {
        throw new Error(`Error loading profile: ${response.status} ${response.statusText}`);
      }
      return response.json();
    })
    .then(data => {
      try {
        // Use the dynamic formatter to handle any schema
        let profileContent = window.ProfileLoader.formatProfileToMarkdown(data);
        
        // Convert markdown to HTML
        const renderedContent = marked.parse(profileContent);
        
        // Sanitize the HTML to prevent XSS
        const sanitizedContent = DOMPurify.sanitize(renderedContent);
        
        // Set the content
        contentContainer.innerHTML = sanitizedContent;
      } catch (error) {
        console.error('Error processing profile data:', error);
        contentContainer.innerHTML = `<div class="error-message">
          <i class="fas fa-exclamation-triangle"></i> 
          <p>Error processing profile data: ${error.message}</p>
          <p>Data structure may be different than expected</p>
        </div>`;
      }
    })
    .catch(error => {
      console.error('Error loading profile:', error);
      contentContainer.innerHTML = `<div class="error-message">
        <i class="fas fa-exclamation-triangle"></i> 
        <p>Error loading profile: ${error.message}</p>
        <p>Please check that the file exists at: ${filePath}</p>
        <p class="file-instructions">Copy the 'generated_profiles' and 'gold-standards' folders to the web-dashboard directory</p>
      </div>`;
    });
  
  // Show the comparison container if this is a comparison
  if (isComparison) {
    const comparisonContainer = document.getElementById('comparison-profile-container');
    comparisonContainer.style.display = 'flex';

    // In mobile view, handle active class for profile cards
    const mediaQuery = window.matchMedia('(max-width: 768px)');
    if (mediaQuery.matches) {
      // If we're in mobile view, don't automatically switch to the comparison tab
      // The user will need to click the tab button to switch views
      document.querySelector('.profile-tab-btn[data-target="comparison-profile"]').disabled = false;
      document.querySelector('.profile-tab-btn[data-target="comparison-profile"]').style.opacity = '1';
    }
  }
}

// Function to add event listeners for profile viewer
function setupProfileViewer() {
  // Populate dropdowns
  populateProfileDropdowns();
  
  // Add event listener for test case change
  document.getElementById('profile-test-case').addEventListener('change', function() {
    const testCase = this.value;
    const modelSelect = document.getElementById('profile-model');
    
    // Clear and repopulate model dropdown based on selected test case
    modelSelect.innerHTML = '<option value="">Select a model</option>';
    
    if (testCase) {
      // Add gold standard option
      const goldOption = document.createElement('option');
      goldOption.value = 'gold-standard';
      goldOption.textContent = 'Gold Standard';
      modelSelect.appendChild(goldOption);
      
      // Add model options
      const models = Object.keys(profileMetadata[testCase].models);
      models.forEach(model => {
        const option = document.createElement('option');
        option.value = model;
        option.textContent = model;
        modelSelect.appendChild(option);
      });
    }
    
    // If both dropdowns have values, automatically load the profile
    const modelValue = modelSelect.value;
    if (testCase && modelValue) {
      loadProfile(testCase, modelValue, document.querySelector('.primary-profile'));
      
      // Update comparison if selected
      const compareWith = document.getElementById('compare-with').value;
      if (compareWith) {
        loadProfile(testCase, compareWith, document.querySelector('.comparison-profile'), true);
      } else {
        document.getElementById('comparison-profile-container').style.display = 'none';
      }
    }
  });
  
  // Add event listener for model change
  document.getElementById('profile-model').addEventListener('change', function() {
    const testCase = document.getElementById('profile-test-case').value;
    const model = this.value;
    
    // Automatically load profile when both dropdowns have values
    if (testCase && model) {
      loadProfile(testCase, model, document.querySelector('.primary-profile'));
      
      // If comparison is selected, ensure it's not the same as primary
      const compareSelect = document.getElementById('compare-with');
      if (compareSelect.value === model) {
        compareSelect.value = '';
        document.getElementById('comparison-profile-container').style.display = 'none';
      }
      
      // Update comparison dropdown options
      populateCompareDropdown(testCase, model);
    }
  });
  
  // Add event listener for the load profile button
  document.getElementById('load-profile').addEventListener('click', function() {
    const testCase = document.getElementById('profile-test-case').value;
    const model = document.getElementById('profile-model').value;
    
    if (!testCase || !model) {
      alert('Please select both a test case and a model.');
      return;
    }
    
    // Load the primary profile
    loadProfile(testCase, model, document.querySelector('.primary-profile'));
    
    // Check if comparison is selected
    const compareWith = document.getElementById('compare-with').value;
    if (compareWith) {
      loadProfile(testCase, compareWith, document.querySelector('.comparison-profile'), true);
    } else {
      document.getElementById('comparison-profile-container').style.display = 'none';
    }
    
    // Add this profile view to the browser history
    const params = new URLSearchParams(window.location.search);
    params.set('test_case', testCase);
    params.set('model', model);
    if (compareWith) {
      params.set('compare', compareWith);
    } else {
      params.delete('compare');
    }
    
    // Include the selected run in URL if specified
    if (selectedRun) {
      params.set('run', selectedRun);
    } else {
      params.delete('run');
    }
    
    const newUrl = `${window.location.pathname}?${params.toString()}`;
    window.history.pushState({ path: newUrl }, '', newUrl);
  });
  
  // Add event listener for comparison dropdown
  document.getElementById('compare-with').addEventListener('change', function() {
    const testCase = document.getElementById('profile-test-case').value;
    const compareWith = this.value;
    
    if (testCase && compareWith) {
      // Load comparison profile
      loadProfile(testCase, compareWith, document.querySelector('.comparison-profile'), true);
    } else {
      // Hide comparison container if "No comparison" is selected
      document.getElementById('comparison-profile-container').style.display = 'none';
    }
  });
}

// Format run timestamp for display using constants
function formatRunTimestamp(runId) {
  // Try to find the run in constants
  const runInfo = window.PROFILES_CONSTANTS.runs.find(run => run.id === runId);
  
  // If found, return its display name, otherwise format the timestamp
  if (runInfo) {
    return runInfo.displayName;
  } else if (runId && runId.startsWith('run_')) {
    // Fallback to timestamp formatting if not in constants
    const timestamp = runId.substring(4); // Remove "run_"
    
    try {
      // Extract date parts
      const year = timestamp.substring(0, 4);
      const month = timestamp.substring(4, 6);
      const day = timestamp.substring(6, 8);
      const hour = timestamp.substring(9, 11);
      const minute = timestamp.substring(11, 13);
      const second = timestamp.substring(13, 15);
      
      // Create a formatted date string
      const date = new Date(year, month-1, day, hour, minute, second);
      return `Run ${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
    } catch (e) {
      // If parsing fails, return the original string
      return `Run ${timestamp}`;
    }
  } else {
    return runId || "Unknown Run";
  }
}

// Get test cases available for the selected run using constants
function getTestCasesForRun(run) {
  if (!run) {
    // If no run selected, return all test cases
    return Object.keys(window.PROFILES_CONSTANTS.testCases);
  }
  
  // Filter test cases that have models in the selected run
  return Object.keys(window.PROFILES_CONSTANTS.testCases).filter(testCaseId => {
    return window.PROFILES_CONSTANTS.testCases[testCaseId].models[run] !== undefined;
  });
}

// Get models available for a test case in the selected run using constants
function getModelsForTestCaseAndRun(testCase, run) {
  if (!testCase || !window.PROFILES_CONSTANTS.testCases[testCase]) return [];
  
  if (!run) {
    // If no run selected, get all unique models across all runs
    const uniqueModels = new Set();
    const modelsByRun = window.PROFILES_CONSTANTS.testCases[testCase].models;
    
    Object.values(modelsByRun).forEach(models => {
      models.forEach(model => uniqueModels.add(model));
    });
    
    return [...uniqueModels];
  }
  
  // Get models for the specific run
  return window.PROFILES_CONSTANTS.testCases[testCase].models[run] || [];
}

// Populate test cases dropdown based on selected run
function populateTestCasesForSelectedRun() {
  const testCaseSelect = document.getElementById('profile-test-case');
  
  // Clear existing options except the first one
  testCaseSelect.innerHTML = '<option value="">Select a test case</option>';
  
  // Get test cases for the selected run
  const testCases = getTestCasesForRun(selectedRun);
  
  // Add test cases
  testCases.forEach(testCase => {
    const option = document.createElement('option');
    option.value = testCase;
    option.textContent = profileMetadata[testCase].displayName;
    testCaseSelect.appendChild(option);
  });
}

// Helper function to populate comparison dropdown, avoiding the primary selected model
function populateCompareDropdown(testCase, primaryModel) {
  const compareSelect = document.getElementById('compare-with');
  const currentValue = compareSelect.value;
  
  // Clear dropdown
  compareSelect.innerHTML = '<option value="">No comparison</option>';
  
  if (testCase) {
    // Add gold standard option
    const goldOption = document.createElement('option');
    goldOption.value = 'gold-standard';
    goldOption.textContent = 'Gold Standard';
    compareSelect.appendChild(goldOption);
    
    // Add other models (except the primary selected one)
    // Filter by the selected run if applicable
    const models = getModelsForTestCaseAndRun(testCase, selectedRun);
    models.forEach(model => {
      if (model !== primaryModel) {
        const option = document.createElement('option');
        option.value = model;
        option.textContent = model;
        compareSelect.appendChild(option);
      }
    });
  }
  
  // Try to restore previous selection if valid
  if (currentValue && currentValue !== primaryModel) {
    compareSelect.value = currentValue;
  }
}

// Check URL parameters for direct loading
function checkUrlParameters() {
  const params = new URLSearchParams(window.location.search);
  const run = params.get('run');
  const testCase = params.get('test_case');
  const model = params.get('model');
  const compare = params.get('compare');

  // First set the run if specified
  if (run) {
    const runSelect = document.getElementById('profile-run');
    // Check if this run exists in the dropdown
    const runExists = Array.from(runSelect.options).some(option => option.value === run);
    if (runExists) {
      runSelect.value = run;
      selectedRun = run;
      
      // Trigger change event to update test cases
      runSelect.dispatchEvent(new Event('change'));
    }
  }
  
  if (testCase && model && profileMetadata[testCase]) {
    document.getElementById('profile-test-case').value = testCase;
    
    // Trigger the change event to populate models
    const event = new Event('change');
    document.getElementById('profile-test-case').dispatchEvent(event);
    
    // Make sure the model is valid for the selected run
    const validModels = getModelsForTestCaseAndRun(testCase, selectedRun);
    if (validModels.includes(model) || model === 'gold-standard') {
      document.getElementById('profile-model').value = model;
      
      // Trigger the change event to populate comparison
      document.getElementById('profile-model').dispatchEvent(event);
      
      if (compare) {
        document.getElementById('compare-with').value = compare;
      }
      
      // Click the load button
      document.getElementById('load-profile').click();
    }
  }
}

// Add view profile buttons to the results table
function addProfileButtonsToTable() {
  // This will be called from scripts.js after the table is populated
  const rows = document.querySelectorAll('#results-table tbody tr');
  
  rows.forEach(row => {
    const cells = row.cells;
    if (!cells || cells.length === 0) return;
    
    // Skip the "No data available" row
    if (cells.length === 1 && cells[0].colSpan > 1) return;
    
    const testCase = row.cells[0].textContent.toLowerCase().replace(/\s+/g, '-');
    const model = row.cells[1].textContent;
    
    // Check if this profile exists in our metadata
    if (profileMetadata[testCase] && (profileMetadata[testCase].models[model] || model === 'gold-standard')) {
      const viewBtn = document.createElement('button');
      viewBtn.className = 'btn primary-btn view-profile-btn';
      viewBtn.innerHTML = '<i class="fas fa-eye"></i> View';
      viewBtn.addEventListener('click', function() {
        // Set the dropdown values
        document.getElementById('profile-test-case').value = testCase;
        
        // Trigger change event
        const event = new Event('change');
        document.getElementById('profile-test-case').dispatchEvent(event);
        
        document.getElementById('profile-model').value = model;
        document.getElementById('profile-model').dispatchEvent(event);
        
        // Scroll to profile section
        document.querySelector('.profile-viewer-section').scrollIntoView({
          behavior: 'smooth'
        });
      });
      
      const cell = row.cells[6] || row.insertCell();
      cell.appendChild(viewBtn);
    } else {
      const cell = row.cells[6] || row.insertCell();
      cell.textContent = 'N/A';
    }
  });
}

// Export functions for use in other scripts
window.loadProfile = loadProfile;
window.addProfileButtonsToTable = addProfileButtonsToTable;