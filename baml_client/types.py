###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Gender(str, Enum):
    
    MALE = "MALE"
    FEMALE = "FEMALE"

class NarrativeActionSystemType(str, Enum):
    
    VICTIM = "VICTIM"
    PROFESSIONAL = "PROFESSIONAL"
    TRAGIC_HERO = "TRAGIC_HERO"
    REVENGEFUL = "REVENGEFUL"

class SexualBehavioralAnalysisType(str, Enum):
    
    POWER_ASSERTIVE = "POWER_ASSERTIVE"
    POWER_REASSURANCE = "POWER_REASSURANCE"
    ANGER_RETALIATORY = "ANGER_RETALIATORY"
    ANGER_EXCITATION = "ANGER_EXCITATION"

class SexualHomicidePathwaysType(str, Enum):
    
    SADISTIC = "SADISTIC"
    ANGRY = "ANGRY"
    OPPORTUNISTIC = "OPPORTUNISTIC"

class SpatialBehaviorType(str, Enum):
    
    MARAUDER = "MARAUDER"
    COMMUTER = "COMMUTER"

class BehavioralCharacteristics(BaseModel):
    crime_scene_behavior: str
    violence_type: str
    victim_interaction: str
    post_offense_behavior: str
    risk_taking: str
    trophy_taking: str
    reasoning: List[str]

class Demographics(BaseModel):
    age_range: str
    gender: "Gender"
    employment: str
    relationship: str
    living_situation: str
    education: str
    reasoning: List[str]

class FrameworkClassifications(BaseModel):
    narrative_action_system: "NarrativeActionSystemClassification"
    sexual_behavioral_analysis: "SexualBehavioralAnalysisClassification"
    sexual_homicide_pathways_analysis: "SexualHomicidePathwaysClassification"
    spatial_behavioral_analysis: "SpatialBehaviorClassification"

class GeographicBehavior(BaseModel):
    crime_scene_location: str
    crime_scene_layout: str
    crime_scene_characteristics: str
    reasoning: List[str]

class InvestigativeImplications(BaseModel):
    prior_offenses: str
    escalation_risk: str
    documentation: str
    victim_selection: str
    cooling_off_period: str
    reasoning: List[str]

class KeyIdentifiers(BaseModel):
    occupation_type: str
    appearance: str
    social_role: str
    hobbies: str
    vehicle: str
    reasoning: List[str]

class NarrativeActionSystemClassification(BaseModel):
    primary_classification: "NarrativeActionSystemType"
    confidence: float
    supporting_evidence: List[str]
    contradicting_evidence: List[str]
    reasoning: List[str]

class OffenderProfile(BaseModel):
    demographics: "Demographics"
    psychological_characteristics: "PsychologicalCharacteristics"
    behavioral_characteristics: "BehavioralCharacteristics"
    geographic_behavior: "GeographicBehavior"
    skills_and_knowledge: "SkillsAndKnowledge"
    investigative_implications: "InvestigativeImplications"
    key_identifiers: "KeyIdentifiers"
    reasoning: List[str]

class ProfileResult(BaseModel):
    case_id: str
    offender_profile: "OffenderProfile"
    validation_metrics: "ValidationMetrics"
    framework_classifications: "FrameworkClassifications"

class PsychologicalCharacteristics(BaseModel):
    personality_type: str
    control_needs: str
    social_competence: str
    stress_factors: str
    fantasy_elements: str
    anger_management: str
    reasoning: List[str]

class SexualBehavioralAnalysisClassification(BaseModel):
    primary_classification: Optional["SexualBehavioralAnalysisType"] = None
    confidence: Optional[float] = None
    supporting_evidence: Optional[List[str]] = None
    contradicting_evidence: Optional[List[str]] = None
    reasoning: Optional[List[str]] = None

class SexualHomicidePathwaysClassification(BaseModel):
    primary_classification: Optional["SexualHomicidePathwaysType"] = None
    confidence: Optional[float] = None
    supporting_evidence: Optional[List[str]] = None
    contradicting_evidence: Optional[List[str]] = None
    reasoning: Optional[List[str]] = None

class SkillsAndKnowledge(BaseModel):
    technical_skills: str
    planning_ability: str
    weapon_proficiency: str
    knot_tying: str
    crime_scene_awareness: str
    reasoning: List[str]

class SpatialBehaviorClassification(BaseModel):
    primary_classification: "SpatialBehaviorType"
    confidence: float
    supporting_evidence: List[str]
    contradicting_evidence: List[str]
    reasoning: List[str]

class ValidationMetrics(BaseModel):
    key_behavioral_indicators: List[str]
    critical_evidence: List[str]
    profile_accuracy_factors: List[str]
